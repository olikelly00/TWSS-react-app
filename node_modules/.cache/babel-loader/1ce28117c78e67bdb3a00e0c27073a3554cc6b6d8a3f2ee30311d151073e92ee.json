{"ast":null,"code":"var _jsxFileName = \"/Users/olikelly/Documents/Coding/school_of_code/api-fueled-react-app/src/components/WebpageBody/QuoteContainer.jsx\";\nimport \"./QuoteContainer.css\";\n\n// This function returns all the quotes (if no search terms have been given by the user) or any quotes that match the user's search parameters. \nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction QuoteContainer({\n  quotes\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: quotes.map((quote, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quoteContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quoteItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: quote.quote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"quoteAuthor\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [quote.author, \" (b. \", quote.birth_year, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 44\n          }, this), \", \", quote.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n}\n_c = QuoteContainer;\nexport default QuoteContainer;\nvar _c;\n$RefreshReg$(_c, \"QuoteContainer\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","Fragment","_Fragment","QuoteContainer","quotes","children","map","quote","index","className","fileName","_jsxFileName","lineNumber","columnNumber","author","birth_year","description","_c","$RefreshReg$"],"sources":["/Users/olikelly/Documents/Coding/school_of_code/api-fueled-react-app/src/components/WebpageBody/QuoteContainer.jsx"],"sourcesContent":["import \"./QuoteContainer.css\"\n\n// This function returns all the quotes (if no search terms have been given by the user) or any quotes that match the user's search parameters. \n\nfunction QuoteContainer({quotes}) {\n\n    return (\n    <>\n    {quotes.map((quote, index) => (\n        <div key={index} className=\"quoteContainer\">\n            <div className=\"quoteItem\">\n                <p>{quote.quote}</p>\n                <p className=\"quoteAuthor\"><strong>{quote.author} (b. {quote.birth_year})</strong>, {quote.description}</p>\n                </div>\n            </div>\n\n        ))}\n        \n    </>\n    \n)\n}\n\n\nexport default QuoteContainer;"],"mappings":";AAAA,OAAO,sBAAsB;;AAE7B;AAAA,SAAAA,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEA,SAASC,cAAcA,CAAC;EAACC;AAAM,CAAC,EAAE;EAE9B,oBACAJ,OAAA,CAAAE,SAAA;IAAAG,QAAA,EACCD,MAAM,CAACE,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACrBR,OAAA;MAAiBS,SAAS,EAAC,gBAAgB;MAAAJ,QAAA,eACvCL,OAAA;QAAKS,SAAS,EAAC,WAAW;QAAAJ,QAAA,gBACtBL,OAAA;UAAAK,QAAA,EAAIE,KAAK,CAACA;QAAK;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpBb,OAAA;UAAGS,SAAS,EAAC,aAAa;UAAAJ,QAAA,gBAACL,OAAA;YAAAK,QAAA,GAASE,KAAK,CAACO,MAAM,EAAC,OAAK,EAACP,KAAK,CAACQ,UAAU,EAAC,GAAC;UAAA;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,MAAE,EAACN,KAAK,CAACS,WAAW;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtG;IAAC,GAJJL,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKN,CAER;EAAC,gBAEJ,CAAC;AAGP;AAACI,EAAA,GAjBQd,cAAc;AAoBvB,eAAeA,cAAc;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}