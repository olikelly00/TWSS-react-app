{"ast":null,"code":"var _jsxFileName = \"/Users/olikelly/Documents/Coding/school_of_code/api-fueled-react-app/src/components/WebpageBody.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport \"./WebpageBody.css\";\n\n// This function returns the main body of the webpage, including the quotes retrieved from the API and a search field for user to filter quotes.\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WebpageBody() {\n  _s();\n  const [quoteData, setQuoteData] = useState([]); // Full list of quotes from the API.\n\n  const [filteredQuotes, setFilteredQuotes] = useState([]); // Filtered list of quotes according to user search input.\n\n  const [quotesAreFiltered, setQuotesAreFiltered] = useState(false); // Dictates what to render depending on whether quotes are filter/unfiltered.\n\n  const [loadingState, setLoadingState] = useState(false); // Dictates what to render depending on whether quotes are loading / have loaded.\n\n  const [requestFailed, setRequestFailed] = useState(false); //  Dictates what to render if API call was unsuccessful. \n\n  // Fetch quotes from API, convert\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:10000/quotes');\n        let quoteData = await response.json();\n        let quoteArray = JSON.parse(quoteData.payload);\n        setQuoteData(quoteArray);\n        setFilteredQuotes(quoteArray);\n        setQuotesAreFiltered(true);\n      } catch (error) {\n        console.error('Error fetching quotes:', error);\n        setRequestFailed(true);\n      }\n    };\n    fetchData();\n  }, []);\n  const filterResults = (quoteArray, searchTerm) => {\n    return quoteArray.filter(quote => quote.quote.toLowerCase().includes(searchTerm.toLowerCase()) || quote.author.toLowerCase().includes(searchTerm.toLowerCase()) || String(quote.birth_year).includes(searchTerm) || quote.description.toLowerCase().includes(searchTerm.toLowerCase()));\n  };\n  const [search, setSearch] = useState(\"\");\n  const handleSearch = event => {\n    const value = event.target.value;\n    setSearch(value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    setLoadingState(true);\n    setTimeout(() => {\n      const results = filterResults(quoteData, search);\n      setFilteredQuotes(results);\n      setLoadingState(false);\n    }, 2000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"webpageBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Looking for something in particular? Search our treasure trove of quotes below:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"searchForm\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"searchBar\",\n          type: \"text\",\n          name: \"search\",\n          value: search,\n          onChange: event => handleSearch(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), loadingState && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 30\n    }, this), requestFailed && /*#__PURE__*/_jsxDEV(RequestFailed, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 31\n    }, this), !loadingState && !requestFailed && (quotesAreFiltered ? filteredQuotes.length > 0 ? /*#__PURE__*/_jsxDEV(QuoteContainer, {\n      quotes: filteredQuotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(NoResults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(QuoteContainer, {\n      quotes: quoteData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n\n// This function returns all the quotes (if no search terms have been given by the user) or any quotes that match the user's search parameters. \n_s(WebpageBody, \"VvBWyMVcCfrM8Xl9rXzqnTxjxjc=\");\n_c = WebpageBody;\nfunction QuoteContainer({\n  quotes\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: quotes.map((quote, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quoteContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quoteItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: quote.quote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"quoteAuthor\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [quote.author, \" (b. \", quote.birth_year, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 48\n          }, this), \", \", quote.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this))\n  }, void 0, false);\n}\n\n// This function returns a 'no results' message and is rendered if no quotes matching the user's search criteria are found. \n_c2 = QuoteContainer;\nfunction NoResults() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Sorry, we don't have quotes for that yet \\uD83D\\uDE14 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Why not try another search?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n// This function returns a 'loading' message and is rendered when the user inputs their search criteria until results are ready to display.  \n_c3 = NoResults;\nfunction Loading() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Bear with us... \\u23F3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"We're putting together our favourite quotes for you.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n// This function returns a 'request failed' message and is rendered if the API call was unsuccessful. \n_c4 = Loading;\nfunction RequestFailed() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"It's not you, it's us. \\uD83D\\uDE2C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Sorry, we're having some trouble getting quotes right now. Please try again later.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_c5 = RequestFailed;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"WebpageBody\");\n$RefreshReg$(_c2, \"QuoteContainer\");\n$RefreshReg$(_c3, \"NoResults\");\n$RefreshReg$(_c4, \"Loading\");\n$RefreshReg$(_c5, \"RequestFailed\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","WebpageBody","_s","quoteData","setQuoteData","filteredQuotes","setFilteredQuotes","quotesAreFiltered","setQuotesAreFiltered","loadingState","setLoadingState","requestFailed","setRequestFailed","fetchData","response","fetch","json","quoteArray","JSON","parse","payload","error","console","filterResults","searchTerm","filter","quote","toLowerCase","includes","author","String","birth_year","description","search","setSearch","handleSearch","event","value","target","handleSubmit","preventDefault","setTimeout","results","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","onChange","Loading","RequestFailed","length","QuoteContainer","quotes","NoResults","_c","map","index","_c2","_c3","_c4","_c5","$RefreshReg$"],"sources":["/Users/olikelly/Documents/Coding/school_of_code/api-fueled-react-app/src/components/WebpageBody.jsx"],"sourcesContent":["import React from 'react';\nimport {useEffect, useState} from 'react';\nimport \"./WebpageBody.css\";\n\n\n\n// This function returns the main body of the webpage, including the quotes retrieved from the API and a search field for user to filter quotes.\n\nexport default function WebpageBody() {\n\n    const [quoteData, setQuoteData] = useState([]); // Full list of quotes from the API.\n\n    const [filteredQuotes, setFilteredQuotes] = useState([]); // Filtered list of quotes according to user search input.\n\n    const [quotesAreFiltered, setQuotesAreFiltered] = useState(false); // Dictates what to render depending on whether quotes are filter/unfiltered.\n\n    const [loadingState, setLoadingState] = useState(false) // Dictates what to render depending on whether quotes are loading / have loaded.\n    \n    const [requestFailed, setRequestFailed] = useState(false); //  Dictates what to render if API call was unsuccessful. \n   \n\n    // Fetch quotes from API, convert\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch('http://localhost:10000/quotes');\n               \n                let quoteData = await response.json();\n                let quoteArray = JSON.parse(quoteData.payload)\n\n                setQuoteData(quoteArray);\n                setFilteredQuotes(quoteArray);\n                setQuotesAreFiltered(true);\n            } catch (error) {\n                console.error('Error fetching quotes:', error);\n                setRequestFailed(true);\n            }\n        };\n        fetchData();\n    }, []);\n\n\n\n\n\n\nconst filterResults = (quoteArray, searchTerm) => {\n    return quoteArray.filter(quote => \n        quote.quote.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        quote.author.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        String(quote.birth_year).includes(searchTerm) ||\n        quote.description.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n};\n\n\n    const [search, setSearch] = useState(\"\");\n\n    const handleSearch = (event) => {\n        const value = event.target.value;\n        setSearch(value)\n      }\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        setLoadingState(true)\n        setTimeout(() => {\n            const results = filterResults(quoteData, search)\n        setFilteredQuotes(results);\n        setLoadingState(false)\n        }, 2000);\n\n    };\n\n    return (\n        <section className=\"webpageBody\"> \n            <p>Looking for something in particular? Search our treasure trove of quotes below:</p>\n            <form className=\"searchForm\" onSubmit={handleSubmit}> \n            <label>\n                <input \n                className=\"searchBar\"\n                type=\"text\" \n                name=\"search\" \n                value={search} \n                onChange={(event) => handleSearch(event)}\n                    />\n            </label>\n            <button className=\"submit-button\" type=\"submit\">Search</button>\n            </form>\n            \n            {loadingState && <Loading/>}\n\n            {requestFailed && <RequestFailed />}\n          \n            \n        \n            {!loadingState && !requestFailed && (\n                quotesAreFiltered ? (\n                    filteredQuotes.length > 0 ? (\n                        <QuoteContainer quotes={filteredQuotes} />\n                    ) : (\n                        <NoResults />\n                    )\n                ) : (\n                    <QuoteContainer quotes={quoteData} />\n                )\n            )}\n        </section>\n    )\n}\n\n\n// This function returns all the quotes (if no search terms have been given by the user) or any quotes that match the user's search parameters. \n\nfunction QuoteContainer({quotes}) {\n\n        return (\n        <>\n        {quotes.map((quote, index) => (\n            <div key={index} className=\"quoteContainer\">\n                <div className=\"quoteItem\">\n                    <p>{quote.quote}</p>\n                    <p className=\"quoteAuthor\"><strong>{quote.author} (b. {quote.birth_year})</strong>, {quote.description}</p>\n                    </div>\n                </div>\n\n            ))}\n            \n        </>\n        \n    )\n}\n\n\n// This function returns a 'no results' message and is rendered if no quotes matching the user's search criteria are found. \n\nfunction NoResults() {\n    return (\n        <>\n        <h4>Sorry, we don't have quotes for that yet 😔 </h4>\n        <p>Why not try another search?</p></>\n    )\n}\n\n\n// This function returns a 'loading' message and is rendered when the user inputs their search criteria until results are ready to display.  \n\nfunction Loading() {\n    return (\n        <>\n        <h4>Bear with us... ⏳</h4>\n        <p>We're putting together our favourite quotes for you.</p>\n        </>\n    )\n}\n\n\n// This function returns a 'request failed' message and is rendered if the API call was unsuccessful. \n\nfunction RequestFailed() {\n    return (\n        <>\n        <h4>It's not you, it's us. 😬</h4>\n        <p>Sorry, we're having some trouble getting quotes right now. Please try again later.</p>\n        </>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}