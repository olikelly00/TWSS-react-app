{"ast":null,"code":"var _jsxFileName = \"/Users/olikelly/Documents/Coding/school_of_code/api-fueled-react-app/src/components/WebpageBody.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport \"./WebpageBody.css\";\n\n// This function returns the main body of the webpage, including the quotes retrieved from the API and a search field for user to filter quotes.\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function WebpageBody() {\n  _s();\n  const [quoteData, setQuoteData] = useState([]); // Full list of quotes from the API.\n\n  const [filteredQuotes, setFilteredQuotes] = useState([]); // Filtered list of quotes according to user search input.\n\n  const [search, setSearch] = useState(\"\"); // User's search, to be rendered on-screen as they type into search bar. \n\n  const [quotesAreFiltered, setQuotesAreFiltered] = useState(false); // Dictates what to render depending on whether quotes are filter/unfiltered.\n\n  const [loadingState, setLoadingState] = useState(false); // Dictates what to render depending on whether quotes are loading / have loaded.\n\n  const [requestFailed, setRequestFailed] = useState(false); //  Dictates what to render if API call was unsuccessful. \n\n  // Make request to Quotes API. \n  // If successful, convert response into Javascript data and change any relevant state variables to update the UI. \n  // If unsuccessful, console.log the error and change the relevant state variable to update the UI\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:10000/quotes');\n        let quoteData = await response.json();\n        let quoteArray = JSON.parse(quoteData.payload);\n        setQuoteData(quoteArray);\n        setFilteredQuotes(quoteArray);\n        setQuotesAreFiltered(true);\n      } catch (error) {\n        console.error('Error fetching quotes:', error);\n        setRequestFailed(true);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Return an array containing only the quotes with terms matching the users' search. \n\n  const filterResults = (quoteArray, searchTerm) => {\n    return quoteArray.filter(quote => quote.quote.toLowerCase().includes(searchTerm.toLowerCase()) || quote.author.toLowerCase().includes(searchTerm.toLowerCase()) || String(quote.birth_year).includes(searchTerm) || quote.description.toLowerCase().includes(searchTerm.toLowerCase()));\n  };\n\n  // When the user submits their search terms, update the loading state, then render the filtered quotes once ready. \n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setLoadingState(true);\n    setTimeout(() => {\n      const results = filterResults(quoteData, search);\n      setFilteredQuotes(results);\n      setLoadingState(false);\n    }, 2000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"webpageBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Looking for something in particular? Search our treasure trove of quotes below:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"searchForm\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"searchBar\",\n          type: \"text\",\n          name: \"search\",\n          value: search,\n          onChange: event => handleSearch(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), loadingState && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 30\n    }, this), requestFailed && /*#__PURE__*/_jsxDEV(RequestFailed, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 31\n    }, this), !loadingState && !requestFailed && (quotesAreFiltered ? filteredQuotes.length > 0 ? /*#__PURE__*/_jsxDEV(QuoteContainer, {\n      quotes: filteredQuotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(NoResults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(QuoteContainer, {\n      quotes: quoteData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n// This function returns all the quotes (if no search terms have been given by the user) or any quotes that match the user's search parameters. \n_s(WebpageBody, \"VM4NxzYcFgWbNWoRK2G2JoUDcpc=\");\n_c = WebpageBody;\nfunction QuoteContainer({\n  quotes\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: quotes.map((quote, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quoteContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quoteItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: quote.quote\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"quoteAuthor\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [quote.author, \" (b. \", quote.birth_year, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 48\n          }, this), \", \", quote.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this))\n  }, void 0, false);\n}\n\n// This function returns a 'no results' message and is rendered if no quotes matching the user's search criteria are found. \n_c2 = QuoteContainer;\nfunction NoResults() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Sorry, we don't have quotes for that yet \\uD83D\\uDE14 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Why not try another search?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n// This function returns a 'loading' message and is rendered when the user inputs their search criteria until results are ready to display.  \n_c3 = NoResults;\nfunction Loading() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Bear with us... \\u23F3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"We're putting together our favourite quotes for you.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n// This function returns a 'request failed' message and is rendered if the API call was unsuccessful. \n_c4 = Loading;\nfunction RequestFailed() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"It's not you, it's us. \\uD83D\\uDE2C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Sorry, we're having some trouble getting quotes right now. Please try again later.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_c5 = RequestFailed;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"WebpageBody\");\n$RefreshReg$(_c2, \"QuoteContainer\");\n$RefreshReg$(_c3, \"NoResults\");\n$RefreshReg$(_c4, \"Loading\");\n$RefreshReg$(_c5, \"RequestFailed\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","WebpageBody","_s","quoteData","setQuoteData","filteredQuotes","setFilteredQuotes","search","setSearch","quotesAreFiltered","setQuotesAreFiltered","loadingState","setLoadingState","requestFailed","setRequestFailed","fetchData","response","fetch","json","quoteArray","JSON","parse","payload","error","console","filterResults","searchTerm","filter","quote","toLowerCase","includes","author","String","birth_year","description","handleSubmit","event","preventDefault","setTimeout","results","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","value","onChange","handleSearch","Loading","RequestFailed","length","QuoteContainer","quotes","NoResults","_c","map","index","_c2","_c3","_c4","_c5","$RefreshReg$"],"sources":["/Users/olikelly/Documents/Coding/school_of_code/api-fueled-react-app/src/components/WebpageBody.jsx"],"sourcesContent":["import React from 'react';\nimport {useEffect, useState} from 'react';\nimport \"./WebpageBody.css\";\n\n\n\n// This function returns the main body of the webpage, including the quotes retrieved from the API and a search field for user to filter quotes.\n\nexport default function WebpageBody() {\n\n    const [quoteData, setQuoteData] = useState([]); // Full list of quotes from the API.\n\n    const [filteredQuotes, setFilteredQuotes] = useState([]); // Filtered list of quotes according to user search input.\n\n    const [search, setSearch] = useState(\"\"); // User's search, to be rendered on-screen as they type into search bar. \n\n    const [quotesAreFiltered, setQuotesAreFiltered] = useState(false); // Dictates what to render depending on whether quotes are filter/unfiltered.\n\n    \n\n    const [loadingState, setLoadingState] = useState(false) // Dictates what to render depending on whether quotes are loading / have loaded.\n    \n    const [requestFailed, setRequestFailed] = useState(false); //  Dictates what to render if API call was unsuccessful. \n   \n    \n\n    // Make request to Quotes API. \n    // If successful, convert response into Javascript data and change any relevant state variables to update the UI. \n    // If unsuccessful, console.log the error and change the relevant state variable to update the UI\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch('http://localhost:10000/quotes');\n               \n                let quoteData = await response.json();\n                let quoteArray = JSON.parse(quoteData.payload)\n\n                setQuoteData(quoteArray);\n                setFilteredQuotes(quoteArray);\n                setQuotesAreFiltered(true);\n            } catch (error) {\n                console.error('Error fetching quotes:', error);\n                setRequestFailed(true);\n            }\n        };\n        fetchData();\n    }, []);\n\n\n\n// Return an array containing only the quotes with terms matching the users' search. \n\n\nconst filterResults = (quoteArray, searchTerm) => {\n    return quoteArray.filter(quote => \n        quote.quote.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        quote.author.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        String(quote.birth_year).includes(searchTerm) ||\n        quote.description.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n};\n\n// When the user submits their search terms, update the loading state, then render the filtered quotes once ready. \n\nconst handleSubmit = (event) => {\n    event.preventDefault();\n    setLoadingState(true)\n    setTimeout(() => {\n        const results = filterResults(quoteData, search)\n    setFilteredQuotes(results);\n    setLoadingState(false)\n    }, 2000);\n\n};\n\n\n\n\n    \n\n    return (\n        <section className=\"webpageBody\"> \n            <p>Looking for something in particular? Search our treasure trove of quotes below:</p>\n            <form className=\"searchForm\" onSubmit={handleSubmit}> \n            <label>\n                <input \n                className=\"searchBar\"\n                type=\"text\" \n                name=\"search\" \n                value={search} \n                onChange={(event) => handleSearch(event)}\n                    />\n            </label>\n            <button className=\"submit-button\" type=\"submit\">Search</button>\n            </form>\n            \n            {loadingState && <Loading/>}\n\n            {requestFailed && <RequestFailed />}\n          \n            \n        \n            {!loadingState && !requestFailed && (\n                quotesAreFiltered ? (\n                    filteredQuotes.length > 0 ? (\n                        <QuoteContainer quotes={filteredQuotes} />\n                    ) : (\n                        <NoResults />\n                    )\n                ) : (\n                    <QuoteContainer quotes={quoteData} />\n                )\n            )}\n        </section>\n    )\n}\n\n\n// This function returns all the quotes (if no search terms have been given by the user) or any quotes that match the user's search parameters. \n\nfunction QuoteContainer({quotes}) {\n\n        return (\n        <>\n        {quotes.map((quote, index) => (\n            <div key={index} className=\"quoteContainer\">\n                <div className=\"quoteItem\">\n                    <p>{quote.quote}</p>\n                    <p className=\"quoteAuthor\"><strong>{quote.author} (b. {quote.birth_year})</strong>, {quote.description}</p>\n                    </div>\n                </div>\n\n            ))}\n            \n        </>\n        \n    )\n}\n\n\n// This function returns a 'no results' message and is rendered if no quotes matching the user's search criteria are found. \n\nfunction NoResults() {\n    return (\n        <>\n        <h4>Sorry, we don't have quotes for that yet 😔 </h4>\n        <p>Why not try another search?</p></>\n    )\n}\n\n\n// This function returns a 'loading' message and is rendered when the user inputs their search criteria until results are ready to display.  \n\nfunction Loading() {\n    return (\n        <>\n        <h4>Bear with us... ⏳</h4>\n        <p>We're putting together our favourite quotes for you.</p>\n        </>\n    )\n}\n\n\n// This function returns a 'request failed' message and is rendered if the API call was unsuccessful. \n\nfunction RequestFailed() {\n    return (\n        <>\n        <h4>It's not you, it's us. 😬</h4>\n        <p>Sorry, we're having some trouble getting quotes right now. Please try again later.</p>\n        </>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}