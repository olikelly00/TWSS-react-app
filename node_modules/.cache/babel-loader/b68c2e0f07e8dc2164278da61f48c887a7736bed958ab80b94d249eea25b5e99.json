{"ast":null,"code":"var _jsxFileName = \"/Users/olikelly/Documents/Coding/school_of_code/api-fueled-react-app/src/components/WebpageBody/WebpageBody.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport \"./WebpageBody.css\";\nimport QuoteContainer from './QuoteContainer';\nimport NoResults from './NoResults';\nimport Loading from './Loading';\n\n// This function returns the main body of the webpage, including the quotes retrieved from the API and a search field for user to filter quotes.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WebpageBody() {\n  _s();\n  const [quoteData, setQuoteData] = useState([]); // Full list of quotes from the API.\n\n  const [filteredQuotes, setFilteredQuotes] = useState([]); // Filtered list of quotes according to user search input.\n\n  const [search, setSearch] = useState(\"\"); // User's search, to be rendered on-screen as they type into search bar. \n\n  const [quotesAreFiltered, setQuotesAreFiltered] = useState(false); // Dictates what to render depending on whether quotes are filter/unfiltered.\n\n  const [loadingState, setLoadingState] = useState(false); // Dictates what to render depending on whether quotes are loading / have loaded.\n\n  const [requestFailed, setRequestFailed] = useState(false); //  Dictates what to render if API call was unsuccessful. \n\n  // Make request to Quotes API. \n  // If successful, convert response into Javascript data and change any relevant state variables to update the UI. \n  // If unsuccessful, console.log the error and change the relevant state variable to update the UI\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:10000/quotes');\n        let quoteData = await response.json();\n        let quoteArray = JSON.parse(quoteData.payload);\n        setQuoteData(quoteArray);\n        setFilteredQuotes(quoteArray);\n        setQuotesAreFiltered(true);\n      } catch (error) {\n        console.error('Error fetching quotes:', error);\n        setRequestFailed(true);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Return an array containing only the quotes with terms matching the users' search. \n\n  const filterResults = (quoteArray, searchTerm) => {\n    return quoteArray.filter(quote => quote.quote.toLowerCase().includes(searchTerm.toLowerCase()) || quote.author.toLowerCase().includes(searchTerm.toLowerCase()) || String(quote.birth_year).includes(searchTerm) || quote.description.toLowerCase().includes(searchTerm.toLowerCase()));\n  };\n\n  // When the user types in their search terms, they appear in real time on the screen.\n\n  const handleSearch = event => {\n    const value = event.target.value;\n    setSearch(value);\n  };\n\n  // When the user submits their search terms, update the loading state, then render the filtered quotes once ready. \n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setLoadingState(true);\n    setTimeout(() => {\n      const results = filterResults(quoteData, search);\n      setFilteredQuotes(results);\n      setLoadingState(false);\n    }, 2000);\n  };\n\n  // Return the HTML the user will see and interact with. \n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"webpageBody\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Looking for something in particular? Search our treasure trove of quotes below:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"searchForm\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"searchBar\",\n          type: \"text\",\n          name: \"search\",\n          value: search,\n          onChange: event => handleSearch(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), loadingState && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 30\n    }, this), requestFailed && /*#__PURE__*/_jsxDEV(RequestFailed, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 31\n    }, this), !loadingState && !requestFailed && (quotesAreFiltered ? filteredQuotes.length > 0 ? /*#__PURE__*/_jsxDEV(QuoteContainer, {\n      quotes: filteredQuotes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(NoResults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(QuoteContainer, {\n      quotes: quoteData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n_s(WebpageBody, \"VM4NxzYcFgWbNWoRK2G2JoUDcpc=\");\n_c = WebpageBody;\nvar _c;\n$RefreshReg$(_c, \"WebpageBody\");","map":{"version":3,"names":["React","useEffect","useState","QuoteContainer","NoResults","Loading","jsxDEV","_jsxDEV","WebpageBody","_s","quoteData","setQuoteData","filteredQuotes","setFilteredQuotes","search","setSearch","quotesAreFiltered","setQuotesAreFiltered","loadingState","setLoadingState","requestFailed","setRequestFailed","fetchData","response","fetch","json","quoteArray","JSON","parse","payload","error","console","filterResults","searchTerm","filter","quote","toLowerCase","includes","author","String","birth_year","description","handleSearch","event","value","target","handleSubmit","preventDefault","setTimeout","results","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","onChange","RequestFailed","length","quotes","_c","$RefreshReg$"],"sources":["/Users/olikelly/Documents/Coding/school_of_code/api-fueled-react-app/src/components/WebpageBody/WebpageBody.jsx"],"sourcesContent":["import React from 'react';\nimport {useEffect, useState} from 'react';\nimport \"./WebpageBody.css\";\nimport QuoteContainer from './QuoteContainer';\nimport NoResults from './NoResults';\nimport Loading from './Loading';\n\n\n// This function returns the main body of the webpage, including the quotes retrieved from the API and a search field for user to filter quotes.\n\nexport default function WebpageBody() {\n\n    const [quoteData, setQuoteData] = useState([]); // Full list of quotes from the API.\n\n    const [filteredQuotes, setFilteredQuotes] = useState([]); // Filtered list of quotes according to user search input.\n\n    const [search, setSearch] = useState(\"\"); // User's search, to be rendered on-screen as they type into search bar. \n\n    const [quotesAreFiltered, setQuotesAreFiltered] = useState(false); // Dictates what to render depending on whether quotes are filter/unfiltered.\n\n    const [loadingState, setLoadingState] = useState(false) // Dictates what to render depending on whether quotes are loading / have loaded.\n    \n    const [requestFailed, setRequestFailed] = useState(false); //  Dictates what to render if API call was unsuccessful. \n   \n    \n    // Make request to Quotes API. \n    // If successful, convert response into Javascript data and change any relevant state variables to update the UI. \n    // If unsuccessful, console.log the error and change the relevant state variable to update the UI\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch('http://localhost:10000/quotes');\n               \n                let quoteData = await response.json();\n                let quoteArray = JSON.parse(quoteData.payload)\n\n                setQuoteData(quoteArray);\n                setFilteredQuotes(quoteArray);\n                setQuotesAreFiltered(true);\n            } catch (error) {\n                console.error('Error fetching quotes:', error);\n                setRequestFailed(true);\n            }\n        };\n        fetchData();\n    }, []);\n\n\n// Return an array containing only the quotes with terms matching the users' search. \n\n\nconst filterResults = (quoteArray, searchTerm) => {\n    return quoteArray.filter(quote => \n        quote.quote.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        quote.author.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        String(quote.birth_year).includes(searchTerm) ||\n        quote.description.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n};\n\n\n// When the user types in their search terms, they appear in real time on the screen.\n\nconst handleSearch = (event) => {\n    const value = event.target.value;\n    setSearch(value)\n  }\n\n\n// When the user submits their search terms, update the loading state, then render the filtered quotes once ready. \n\nconst handleSubmit = (event) => {\n    event.preventDefault();\n    setLoadingState(true)\n    setTimeout(() => {\n        const results = filterResults(quoteData, search)\n    setFilteredQuotes(results);\n    setLoadingState(false)\n    }, 2000);\n\n};\n\n\n// Return the HTML the user will see and interact with. \n\n    return (\n        <section className=\"webpageBody\"> \n            <p>Looking for something in particular? Search our treasure trove of quotes below:</p>\n            <form className=\"searchForm\" onSubmit={handleSubmit}> \n            <label>\n                <input \n                className=\"searchBar\"\n                type=\"text\" \n                name=\"search\" \n                value={search} \n                onChange={(event) => handleSearch(event)}\n                    />\n            </label>\n            <button className=\"submit-button\" type=\"submit\">Search</button>\n            </form>\n            \n            {loadingState && <Loading/>}\n\n            {requestFailed && <RequestFailed />}\n          \n            \n        \n            {!loadingState && !requestFailed && (\n                quotesAreFiltered ? (\n                    filteredQuotes.length > 0 ? (\n                        <QuoteContainer quotes={filteredQuotes} />\n                    ) : (\n                        <NoResults />\n                    )\n                ) : (\n                    <QuoteContainer quotes={quoteData} />\n                )\n            )}\n        </section>\n    )\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}